ðŸš€ Project Highlight: Text-Based Calculator in 8086 Assembly Language

Iâ€™m excited to share one of my recent low-level programming projects â€” a fully functional text-based calculator built using 8086 Assembly Language, designed to run in DOSBox or EMU8086 environments.

ðŸ”§ Key Features:
	â€¢	Operates on the command line with a user-friendly text interface
	â€¢	Supports four fundamental arithmetic operations: Addition, Subtraction (with sign handling), Multiplication, and Division (with divide-by-zero protection)
	â€¢	Uses DOS interrupt services (INT 21h and INT 16h) for input/output
	â€¢	Includes custom routines for:
	â€¢	Integer input parsing
	â€¢	Number-to-string conversion
	â€¢	Dynamic result display
	â€¢	Handles invalid input gracefully and prompts users to retry

ðŸ§  What I Learned:
This project deepened my understanding of:
	â€¢	Register-level data manipulation (AX, BX, CX, DX)
	â€¢	Stack operations (PUSH, POP) for managing user input
	â€¢	Control flow and decision-making in assembly
	â€¢	Error handling in low-level systems

ðŸ“Œ Why This Matters:
While high-level programming dominates todayâ€™s landscape, understanding how a CPU interprets instructions at the lowest level gives a strong foundation for system-level programming, embedded development, and performance optimization.

ðŸ’¡ Tools Used:
	â€¢	EMU8086 Microprocessor Emulator
	â€¢	DOSBox for real-mode simulation
	â€¢	Pure 8086 Assembly (no external libraries)

This calculator is part of a broader initiative to explore computer architecture and assembly language programming, especially relevant for hardware-near applications like embedded systems and real-time control.
